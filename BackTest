import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from tkinter import Tk, Label, Entry, Button, StringVar, filedialog, messagebox
import numpy as np

def fetch_data(file_path):
    print(f"Fetching data from: {file_path}")  # Debugging statement
    data = pd.read_csv(file_path)
    data['Date'] = pd.to_datetime(data['Date'])
    return data

def prepare_data(data):
    data['YearMonth'] = data['Date'].apply(lambda x: x.replace(day=1))
    grouped_data = data.groupby('YearMonth')['Close'].mean().reset_index()
    grouped_data['YearMonth'] = grouped_data['YearMonth'].apply(lambda x: x.timestamp())
    return grouped_data[['YearMonth', 'Close']]

def train_model(data):
    X = np.array(data['YearMonth']).reshape(-1, 1)
    y = data['Close'].values
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
    
    model = XGBRegressor()
    model.fit(X_train, y_train)
    
    return model, X_train, y_train, X_test, y_test


def backtest(file_path):
    data = fetch_data(file_path)
    prepared_data = prepare_data(data)
    model, X_train, y_train, X_test, y_test = train_model(prepared_data)

def predict_future_price(model, data, future_date):
    future_timestamp = pd.to_datetime(future_date).timestamp()
    future_price = model.predict(np.array([[future_timestamp]]))
    return future_price[0]

def select_file():
    file_path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
    file_path_var.set(file_path)
    print(f"File selected: {file_path}")  # Debugging statement

def run_backtest():
    file_path = file_path_var.get()
    print(f"Running backtest with file: {file_path}")  # Debugging statement
    try:
        backtest(file_path)
    except Exception as e:
        messagebox.showerror("Error", str(e))

def predict_future():
    future_date = future_date_var.get()
    file_path = file_path_var.get()
    try:
        data = fetch_data(file_path)
        prepared_data = prepare_data(data)
        model, _, _, _, _ = train_model(prepared_data)
        future_price = predict_future_price(model, prepared_data, future_date)
        messagebox.showinfo("Future Price Prediction", f"Predicted price for {future_date}: ${future_price:.2f}")
    except Exception as e:
        messagebox.showerror("Error", str(e))

# Set up the GUI
root = Tk()
root.title("Stock Prediction")

Label(root, text="Upload CSV File:").grid(row=0, column=0)
file_path_var = StringVar()
Entry(root, textvariable=file_path_var, width=50).grid(row=0, column=1)
Button(root, text="Browse", command=select_file).grid(row=0, column=2)

Label(root, text="Enter Future Date (YYYY-MM-DD):").grid(row=2, column=0)
future_date_var = StringVar()
Entry(root, textvariable=future_date_var, width=20).grid(row=2, column=1)

Button(root, text="Predict Future Price", command=predict_future).grid(row=3, column=0, columnspan=3)

root.mainloop()
